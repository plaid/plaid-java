/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.575.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.plaid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Configuration parameters for the Investments product
 */
@ApiModel(description = "Configuration parameters for the Investments product")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-09T17:51:17.896278Z[Etc/UTC]")
public class LinkTokenInvestments {
  public static final String SERIALIZED_NAME_ALLOW_UNVERIFIED_CRYPTO_WALLETS = "allow_unverified_crypto_wallets";
  @SerializedName(SERIALIZED_NAME_ALLOW_UNVERIFIED_CRYPTO_WALLETS)
  private Boolean allowUnverifiedCryptoWallets;

  public static final String SERIALIZED_NAME_ALLOW_MANUAL_ENTRY = "allow_manual_entry";
  @SerializedName(SERIALIZED_NAME_ALLOW_MANUAL_ENTRY)
  private Boolean allowManualEntry;


  public LinkTokenInvestments allowUnverifiedCryptoWallets(Boolean allowUnverifiedCryptoWallets) {
    
    this.allowUnverifiedCryptoWallets = allowUnverifiedCryptoWallets;
    return this;
  }

   /**
   * If &#x60;true&#x60;, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to &#x60;false&#x60;.
   * @return allowUnverifiedCryptoWallets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`.")

  public Boolean getAllowUnverifiedCryptoWallets() {
    return allowUnverifiedCryptoWallets;
  }


  public void setAllowUnverifiedCryptoWallets(Boolean allowUnverifiedCryptoWallets) {
    this.allowUnverifiedCryptoWallets = allowUnverifiedCryptoWallets;
  }


  public LinkTokenInvestments allowManualEntry(Boolean allowManualEntry) {
    
    this.allowManualEntry = allowManualEntry;
    return this;
  }

   /**
   * If &#x60;true&#x60;, allow users to manually enter Investments account and holdings information. Defaults to &#x60;false&#x60;.
   * @return allowManualEntry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If `true`, allow users to manually enter Investments account and holdings information. Defaults to `false`.")

  public Boolean getAllowManualEntry() {
    return allowManualEntry;
  }


  public void setAllowManualEntry(Boolean allowManualEntry) {
    this.allowManualEntry = allowManualEntry;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkTokenInvestments linkTokenInvestments = (LinkTokenInvestments) o;
    return Objects.equals(this.allowUnverifiedCryptoWallets, linkTokenInvestments.allowUnverifiedCryptoWallets) &&
        Objects.equals(this.allowManualEntry, linkTokenInvestments.allowManualEntry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowUnverifiedCryptoWallets, allowManualEntry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkTokenInvestments {\n");
    sb.append("    allowUnverifiedCryptoWallets: ").append(toIndentedString(allowUnverifiedCryptoWallets)).append("\n");
    sb.append("    allowManualEntry: ").append(toIndentedString(allowManualEntry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

