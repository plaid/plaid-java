/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.635.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.plaid.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of rate which indicates how the predicted yield was calculated. It is one of:  &#x60;coupon&#x60;: the annualized interest rate for securities with a one-year term or longer, such as treasury notes and bonds.  &#x60;coupon_equivalent&#x60;: the calculated equivalent for the annualized interest rate factoring in the discount rate and time to maturity, for shorter term, non-interest-bearing securities such as treasury bills.  &#x60;discount&#x60;: the rate at which the present value or cost is discounted from the future value upon maturity, also known as the face value.  &#x60;yield&#x60;: the total predicted rate of return factoring in both the discount rate and the coupon rate, applicable to securities such as exchange-traded bonds which can both be interest-bearing as well as sold at a discount off its face value.
 */
@JsonAdapter(YieldRateType.Adapter.class)
public enum YieldRateType {
  
  COUPON("coupon"),
  
  COUPON_EQUIVALENT("coupon_equivalent"),
  
  DISCOUNT("discount"),
  
  YIELD("yield"),
  
  NULL("null"),

  // This is returned when an enum is returned from the API that doesn't exist in the OpenAPI file.
  // Try upgrading your client-library version.
  ENUM_UNKNOWN("ENUM_UNKNOWN");

  private String value;

  YieldRateType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static YieldRateType fromValue(String value) {
    for (YieldRateType b : YieldRateType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return null;  }

  public static class Adapter extends TypeAdapter<YieldRateType> {
    @Override
    public void write(final JsonWriter jsonWriter, final YieldRateType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public YieldRateType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return YieldRateType.fromValue(value);
    }
  }
}

