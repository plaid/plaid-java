/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.54.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.plaid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Defines the request schema for &#x60;/sandbox/transfer/sweep/simulate&#x60;
 */
@ApiModel(description = "Defines the request schema for `/sandbox/transfer/sweep/simulate`")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-29T18:47:05.830Z[GMT]")
public class SandboxTransferSweepSimulateRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SWEPT = "swept";
  @SerializedName(SERIALIZED_NAME_SWEPT)
  private List<String> swept = null;

  public static final String SERIALIZED_NAME_REVERSE_SWEPT = "reverse_swept";
  @SerializedName(SERIALIZED_NAME_REVERSE_SWEPT)
  private List<String> reverseSwept = null;


  public SandboxTransferSweepSimulateRequest clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public SandboxTransferSweepSimulateRequest secret(String secret) {
    
    this.secret = secret;
    return this;
  }

   /**
   * Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
   * @return secret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")

  public String getSecret() {
    return secret;
  }


  public void setSecret(String secret) {
    this.secret = secret;
  }


  public SandboxTransferSweepSimulateRequest swept(List<String> swept) {
    
    this.swept = swept;
    return this;
  }

  public SandboxTransferSweepSimulateRequest addSweptItem(String sweptItem) {
    if (this.swept == null) {
      this.swept = new ArrayList<>();
    }
    this.swept.add(sweptItem);
    return this;
  }

   /**
   * A set of &#x60;pending&#x60; or &#x60;posted&#x60; transfers which should be included in the sweep.
   * @return swept
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A set of `pending` or `posted` transfers which should be included in the sweep.")

  public List<String> getSwept() {
    return swept;
  }


  public void setSwept(List<String> swept) {
    this.swept = swept;
  }


  public SandboxTransferSweepSimulateRequest reverseSwept(List<String> reverseSwept) {
    
    this.reverseSwept = reverseSwept;
    return this;
  }

  public SandboxTransferSweepSimulateRequest addReverseSweptItem(String reverseSweptItem) {
    if (this.reverseSwept == null) {
      this.reverseSwept = new ArrayList<>();
    }
    this.reverseSwept.add(reverseSweptItem);
    return this;
  }

   /**
   * A set of transfers to be &#x60;reverse_swept&#x60;. Transfers must first be &#x60;reversed&#x60; using the &#x60;/sandbox/transfer/simulate&#x60; endpoint before they can be &#x60;reverse_swept&#x60;
   * @return reverseSwept
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A set of transfers to be `reverse_swept`. Transfers must first be `reversed` using the `/sandbox/transfer/simulate` endpoint before they can be `reverse_swept`")

  public List<String> getReverseSwept() {
    return reverseSwept;
  }


  public void setReverseSwept(List<String> reverseSwept) {
    this.reverseSwept = reverseSwept;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest = (SandboxTransferSweepSimulateRequest) o;
    return Objects.equals(this.clientId, sandboxTransferSweepSimulateRequest.clientId) &&
        Objects.equals(this.secret, sandboxTransferSweepSimulateRequest.secret) &&
        Objects.equals(this.swept, sandboxTransferSweepSimulateRequest.swept) &&
        Objects.equals(this.reverseSwept, sandboxTransferSweepSimulateRequest.reverseSwept);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, secret, swept, reverseSwept);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SandboxTransferSweepSimulateRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    swept: ").append(toIndentedString(swept)).append("\n");
    sb.append("    reverseSwept: ").append(toIndentedString(reverseSwept)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

