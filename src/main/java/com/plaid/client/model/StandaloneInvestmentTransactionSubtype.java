/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.11.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.plaid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Valid subtypes for Investment transaction subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
 */
@ApiModel(description = "Valid subtypes for Investment transaction subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-31T09:49:55.055Z[GMT]")
public class StandaloneInvestmentTransactionSubtype {
  public static final String SERIALIZED_NAME_ACCOUNT_FEE = "account fee";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_FEE)
  private String accountFee;

  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private String assignment;

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private String buy;

  public static final String SERIALIZED_NAME_BUY_TO_COVER = "buy to cover";
  @SerializedName(SERIALIZED_NAME_BUY_TO_COVER)
  private String buyToCover;

  public static final String SERIALIZED_NAME_CONTRIBUTION = "contribution";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION)
  private String contribution;

  public static final String SERIALIZED_NAME_DEPOSIT = "deposit";
  @SerializedName(SERIALIZED_NAME_DEPOSIT)
  private String deposit;

  public static final String SERIALIZED_NAME_DISTRIBUTION = "distribution";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION)
  private String distribution;

  public static final String SERIALIZED_NAME_DIVIDEND = "dividend";
  @SerializedName(SERIALIZED_NAME_DIVIDEND)
  private String dividend;

  public static final String SERIALIZED_NAME_DIVIDEND_REINVESTMENT = "dividend reinvestment";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_REINVESTMENT)
  private String dividendReinvestment;

  public static final String SERIALIZED_NAME_EXERCISE = "exercise";
  @SerializedName(SERIALIZED_NAME_EXERCISE)
  private String exercise;

  public static final String SERIALIZED_NAME_EXPIRE = "expire";
  @SerializedName(SERIALIZED_NAME_EXPIRE)
  private String expire;

  public static final String SERIALIZED_NAME_FUND_FEE = "fund fee";
  @SerializedName(SERIALIZED_NAME_FUND_FEE)
  private String fundFee;

  public static final String SERIALIZED_NAME_INTEREST = "interest";
  @SerializedName(SERIALIZED_NAME_INTEREST)
  private String interest;

  public static final String SERIALIZED_NAME_INTEREST_RECEIVABLE = "interest receivable";
  @SerializedName(SERIALIZED_NAME_INTEREST_RECEIVABLE)
  private String interestReceivable;

  public static final String SERIALIZED_NAME_INTEREST_REINVESTMENT = "interest reinvestment";
  @SerializedName(SERIALIZED_NAME_INTEREST_REINVESTMENT)
  private String interestReinvestment;

  public static final String SERIALIZED_NAME_LEGAL_FEE = "legal fee";
  @SerializedName(SERIALIZED_NAME_LEGAL_FEE)
  private String legalFee;

  public static final String SERIALIZED_NAME_LOAN_PAYMENT = "loan payment";
  @SerializedName(SERIALIZED_NAME_LOAN_PAYMENT)
  private String loanPayment;

  public static final String SERIALIZED_NAME_LONG_TERM_CAPITAL_GAIN = "long-term capital gain";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_CAPITAL_GAIN)
  private String longTermCapitalGain;

  public static final String SERIALIZED_NAME_LONG_TERM_CAPITAL_GAIN_REINVESTMENT = "long-term capital gain reinvestment";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_CAPITAL_GAIN_REINVESTMENT)
  private String longTermCapitalGainReinvestment;

  public static final String SERIALIZED_NAME_MANAGEMENT_FEE = "management fee";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_FEE)
  private String managementFee;

  public static final String SERIALIZED_NAME_MARGIN_EXPENSE = "margin expense";
  @SerializedName(SERIALIZED_NAME_MARGIN_EXPENSE)
  private String marginExpense;

  public static final String SERIALIZED_NAME_MERGER = "merger";
  @SerializedName(SERIALIZED_NAME_MERGER)
  private String merger;

  public static final String SERIALIZED_NAME_MISCELLANEOUS_FEE = "miscellaneous fee";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS_FEE)
  private String miscellaneousFee;

  public static final String SERIALIZED_NAME_NON_QUALIFIED_DIVIDEND = "non-qualified dividend";
  @SerializedName(SERIALIZED_NAME_NON_QUALIFIED_DIVIDEND)
  private String nonQualifiedDividend;

  public static final String SERIALIZED_NAME_NON_RESIDENT_TAX = "non-resident tax";
  @SerializedName(SERIALIZED_NAME_NON_RESIDENT_TAX)
  private String nonResidentTax;

  public static final String SERIALIZED_NAME_PENDING_CREDIT = "pending credit";
  @SerializedName(SERIALIZED_NAME_PENDING_CREDIT)
  private String pendingCredit;

  public static final String SERIALIZED_NAME_PENDING_DEBIT = "pending debit";
  @SerializedName(SERIALIZED_NAME_PENDING_DEBIT)
  private String pendingDebit;

  public static final String SERIALIZED_NAME_QUALIFIED_DIVIDEND = "qualified dividend";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_DIVIDEND)
  private String qualifiedDividend;

  public static final String SERIALIZED_NAME_REBALANCE = "rebalance";
  @SerializedName(SERIALIZED_NAME_REBALANCE)
  private String rebalance;

  public static final String SERIALIZED_NAME_RETURN_OF_PRINCIPAL = "return of principal";
  @SerializedName(SERIALIZED_NAME_RETURN_OF_PRINCIPAL)
  private String returnOfPrincipal;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private String sell;

  public static final String SERIALIZED_NAME_SELL_SHORT = "sell short";
  @SerializedName(SERIALIZED_NAME_SELL_SHORT)
  private String sellShort;

  public static final String SERIALIZED_NAME_SHORT_TERM_CAPITAL_GAIN = "short-term capital gain";
  @SerializedName(SERIALIZED_NAME_SHORT_TERM_CAPITAL_GAIN)
  private String shortTermCapitalGain;

  public static final String SERIALIZED_NAME_SHORT_TERM_CAPITAL_GAIN_REINVESTMENT = "short-term capital gain reinvestment";
  @SerializedName(SERIALIZED_NAME_SHORT_TERM_CAPITAL_GAIN_REINVESTMENT)
  private String shortTermCapitalGainReinvestment;

  public static final String SERIALIZED_NAME_SPIN_OFF = "spin off";
  @SerializedName(SERIALIZED_NAME_SPIN_OFF)
  private String spinOff;

  public static final String SERIALIZED_NAME_SPLIT = "split";
  @SerializedName(SERIALIZED_NAME_SPLIT)
  private String split;

  public static final String SERIALIZED_NAME_STOCK_DISTRIBUTION = "stock distribution";
  @SerializedName(SERIALIZED_NAME_STOCK_DISTRIBUTION)
  private String stockDistribution;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private String tax;

  public static final String SERIALIZED_NAME_TAX_WITHHELD = "tax withheld";
  @SerializedName(SERIALIZED_NAME_TAX_WITHHELD)
  private String taxWithheld;

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private String transfer;

  public static final String SERIALIZED_NAME_TRANSFER_FEE = "transfer fee";
  @SerializedName(SERIALIZED_NAME_TRANSFER_FEE)
  private String transferFee;

  public static final String SERIALIZED_NAME_TRUST_FEE = "trust fee";
  @SerializedName(SERIALIZED_NAME_TRUST_FEE)
  private String trustFee;

  public static final String SERIALIZED_NAME_UNQUALIFIED_GAIN = "unqualified gain";
  @SerializedName(SERIALIZED_NAME_UNQUALIFIED_GAIN)
  private String unqualifiedGain;

  public static final String SERIALIZED_NAME_WITHDRAWAL = "withdrawal";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL)
  private String withdrawal;


  public StandaloneInvestmentTransactionSubtype accountFee(String accountFee) {
    
    this.accountFee = accountFee;
    return this;
  }

   /**
   * Fees paid for account maintenance
   * @return accountFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees paid for account maintenance")

  public String getAccountFee() {
    return accountFee;
  }


  public void setAccountFee(String accountFee) {
    this.accountFee = accountFee;
  }


  public StandaloneInvestmentTransactionSubtype assignment(String assignment) {
    
    this.assignment = assignment;
    return this;
  }

   /**
   * Assignment of short option holding
   * @return assignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Assignment of short option holding")

  public String getAssignment() {
    return assignment;
  }


  public void setAssignment(String assignment) {
    this.assignment = assignment;
  }


  public StandaloneInvestmentTransactionSubtype buy(String buy) {
    
    this.buy = buy;
    return this;
  }

   /**
   * Purchase to open or increase a position
   * @return buy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase to open or increase a position")

  public String getBuy() {
    return buy;
  }


  public void setBuy(String buy) {
    this.buy = buy;
  }


  public StandaloneInvestmentTransactionSubtype buyToCover(String buyToCover) {
    
    this.buyToCover = buyToCover;
    return this;
  }

   /**
   * Purchase to close a short position
   * @return buyToCover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase to close a short position")

  public String getBuyToCover() {
    return buyToCover;
  }


  public void setBuyToCover(String buyToCover) {
    this.buyToCover = buyToCover;
  }


  public StandaloneInvestmentTransactionSubtype contribution(String contribution) {
    
    this.contribution = contribution;
    return this;
  }

   /**
   * Inflow of assets into a tax-advantaged account
   * @return contribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of assets into a tax-advantaged account")

  public String getContribution() {
    return contribution;
  }


  public void setContribution(String contribution) {
    this.contribution = contribution;
  }


  public StandaloneInvestmentTransactionSubtype deposit(String deposit) {
    
    this.deposit = deposit;
    return this;
  }

   /**
   * Inflow of cash into an account
   * @return deposit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash into an account")

  public String getDeposit() {
    return deposit;
  }


  public void setDeposit(String deposit) {
    this.deposit = deposit;
  }


  public StandaloneInvestmentTransactionSubtype distribution(String distribution) {
    
    this.distribution = distribution;
    return this;
  }

   /**
   * Outflow of assets from a tax-advantaged account
   * @return distribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Outflow of assets from a tax-advantaged account")

  public String getDistribution() {
    return distribution;
  }


  public void setDistribution(String distribution) {
    this.distribution = distribution;
  }


  public StandaloneInvestmentTransactionSubtype dividend(String dividend) {
    
    this.dividend = dividend;
    return this;
  }

   /**
   * Inflow of cash from a dividend
   * @return dividend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash from a dividend")

  public String getDividend() {
    return dividend;
  }


  public void setDividend(String dividend) {
    this.dividend = dividend;
  }


  public StandaloneInvestmentTransactionSubtype dividendReinvestment(String dividendReinvestment) {
    
    this.dividendReinvestment = dividendReinvestment;
    return this;
  }

   /**
   * Purchase using proceeds from a cash dividend
   * @return dividendReinvestment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase using proceeds from a cash dividend")

  public String getDividendReinvestment() {
    return dividendReinvestment;
  }


  public void setDividendReinvestment(String dividendReinvestment) {
    this.dividendReinvestment = dividendReinvestment;
  }


  public StandaloneInvestmentTransactionSubtype exercise(String exercise) {
    
    this.exercise = exercise;
    return this;
  }

   /**
   * Exercise of an option or warrant contract
   * @return exercise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exercise of an option or warrant contract")

  public String getExercise() {
    return exercise;
  }


  public void setExercise(String exercise) {
    this.exercise = exercise;
  }


  public StandaloneInvestmentTransactionSubtype expire(String expire) {
    
    this.expire = expire;
    return this;
  }

   /**
   * Expiration of an option or warrant contract 
   * @return expire
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration of an option or warrant contract ")

  public String getExpire() {
    return expire;
  }


  public void setExpire(String expire) {
    this.expire = expire;
  }


  public StandaloneInvestmentTransactionSubtype fundFee(String fundFee) {
    
    this.fundFee = fundFee;
    return this;
  }

   /**
   * Fees paid for administration of a mutual fund or other pooled investment vehicle
   * @return fundFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees paid for administration of a mutual fund or other pooled investment vehicle")

  public String getFundFee() {
    return fundFee;
  }


  public void setFundFee(String fundFee) {
    this.fundFee = fundFee;
  }


  public StandaloneInvestmentTransactionSubtype interest(String interest) {
    
    this.interest = interest;
    return this;
  }

   /**
   * Inflow of cash from interest
   * @return interest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash from interest")

  public String getInterest() {
    return interest;
  }


  public void setInterest(String interest) {
    this.interest = interest;
  }


  public StandaloneInvestmentTransactionSubtype interestReceivable(String interestReceivable) {
    
    this.interestReceivable = interestReceivable;
    return this;
  }

   /**
   * Inflow of cash from interest receivable
   * @return interestReceivable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash from interest receivable")

  public String getInterestReceivable() {
    return interestReceivable;
  }


  public void setInterestReceivable(String interestReceivable) {
    this.interestReceivable = interestReceivable;
  }


  public StandaloneInvestmentTransactionSubtype interestReinvestment(String interestReinvestment) {
    
    this.interestReinvestment = interestReinvestment;
    return this;
  }

   /**
   * Purchase using proceeds from a cash interest payment
   * @return interestReinvestment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase using proceeds from a cash interest payment")

  public String getInterestReinvestment() {
    return interestReinvestment;
  }


  public void setInterestReinvestment(String interestReinvestment) {
    this.interestReinvestment = interestReinvestment;
  }


  public StandaloneInvestmentTransactionSubtype legalFee(String legalFee) {
    
    this.legalFee = legalFee;
    return this;
  }

   /**
   * Fees paid for legal charges or services
   * @return legalFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees paid for legal charges or services")

  public String getLegalFee() {
    return legalFee;
  }


  public void setLegalFee(String legalFee) {
    this.legalFee = legalFee;
  }


  public StandaloneInvestmentTransactionSubtype loanPayment(String loanPayment) {
    
    this.loanPayment = loanPayment;
    return this;
  }

   /**
   * Inflow of cash related to payment on a loan
   * @return loanPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash related to payment on a loan")

  public String getLoanPayment() {
    return loanPayment;
  }


  public void setLoanPayment(String loanPayment) {
    this.loanPayment = loanPayment;
  }


  public StandaloneInvestmentTransactionSubtype longTermCapitalGain(String longTermCapitalGain) {
    
    this.longTermCapitalGain = longTermCapitalGain;
    return this;
  }

   /**
   * Long-term capital gain received as cash
   * @return longTermCapitalGain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Long-term capital gain received as cash")

  public String getLongTermCapitalGain() {
    return longTermCapitalGain;
  }


  public void setLongTermCapitalGain(String longTermCapitalGain) {
    this.longTermCapitalGain = longTermCapitalGain;
  }


  public StandaloneInvestmentTransactionSubtype longTermCapitalGainReinvestment(String longTermCapitalGainReinvestment) {
    
    this.longTermCapitalGainReinvestment = longTermCapitalGainReinvestment;
    return this;
  }

   /**
   * Purchase using long-term capital gain cash proceeds
   * @return longTermCapitalGainReinvestment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase using long-term capital gain cash proceeds")

  public String getLongTermCapitalGainReinvestment() {
    return longTermCapitalGainReinvestment;
  }


  public void setLongTermCapitalGainReinvestment(String longTermCapitalGainReinvestment) {
    this.longTermCapitalGainReinvestment = longTermCapitalGainReinvestment;
  }


  public StandaloneInvestmentTransactionSubtype managementFee(String managementFee) {
    
    this.managementFee = managementFee;
    return this;
  }

   /**
   * Fees paid for investment management of a mutual fund or other pooled investment vehicle
   * @return managementFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees paid for investment management of a mutual fund or other pooled investment vehicle")

  public String getManagementFee() {
    return managementFee;
  }


  public void setManagementFee(String managementFee) {
    this.managementFee = managementFee;
  }


  public StandaloneInvestmentTransactionSubtype marginExpense(String marginExpense) {
    
    this.marginExpense = marginExpense;
    return this;
  }

   /**
   * Fees paid for maintaining margin debt
   * @return marginExpense
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees paid for maintaining margin debt")

  public String getMarginExpense() {
    return marginExpense;
  }


  public void setMarginExpense(String marginExpense) {
    this.marginExpense = marginExpense;
  }


  public StandaloneInvestmentTransactionSubtype merger(String merger) {
    
    this.merger = merger;
    return this;
  }

   /**
   * Stock exchanged at a pre-defined ratio as part of a merger between companies
   * @return merger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stock exchanged at a pre-defined ratio as part of a merger between companies")

  public String getMerger() {
    return merger;
  }


  public void setMerger(String merger) {
    this.merger = merger;
  }


  public StandaloneInvestmentTransactionSubtype miscellaneousFee(String miscellaneousFee) {
    
    this.miscellaneousFee = miscellaneousFee;
    return this;
  }

   /**
   * Fee associated with various account or holding actions
   * @return miscellaneousFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fee associated with various account or holding actions")

  public String getMiscellaneousFee() {
    return miscellaneousFee;
  }


  public void setMiscellaneousFee(String miscellaneousFee) {
    this.miscellaneousFee = miscellaneousFee;
  }


  public StandaloneInvestmentTransactionSubtype nonQualifiedDividend(String nonQualifiedDividend) {
    
    this.nonQualifiedDividend = nonQualifiedDividend;
    return this;
  }

   /**
   * Inflow of cash from a non-qualified dividend
   * @return nonQualifiedDividend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash from a non-qualified dividend")

  public String getNonQualifiedDividend() {
    return nonQualifiedDividend;
  }


  public void setNonQualifiedDividend(String nonQualifiedDividend) {
    this.nonQualifiedDividend = nonQualifiedDividend;
  }


  public StandaloneInvestmentTransactionSubtype nonResidentTax(String nonResidentTax) {
    
    this.nonResidentTax = nonResidentTax;
    return this;
  }

   /**
   * Taxes paid on behalf of the investor for non-residency in investment jurisdiction
   * @return nonResidentTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Taxes paid on behalf of the investor for non-residency in investment jurisdiction")

  public String getNonResidentTax() {
    return nonResidentTax;
  }


  public void setNonResidentTax(String nonResidentTax) {
    this.nonResidentTax = nonResidentTax;
  }


  public StandaloneInvestmentTransactionSubtype pendingCredit(String pendingCredit) {
    
    this.pendingCredit = pendingCredit;
    return this;
  }

   /**
   * Pending inflow of cash
   * @return pendingCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pending inflow of cash")

  public String getPendingCredit() {
    return pendingCredit;
  }


  public void setPendingCredit(String pendingCredit) {
    this.pendingCredit = pendingCredit;
  }


  public StandaloneInvestmentTransactionSubtype pendingDebit(String pendingDebit) {
    
    this.pendingDebit = pendingDebit;
    return this;
  }

   /**
   * Pending outflow of cash
   * @return pendingDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pending outflow of cash")

  public String getPendingDebit() {
    return pendingDebit;
  }


  public void setPendingDebit(String pendingDebit) {
    this.pendingDebit = pendingDebit;
  }


  public StandaloneInvestmentTransactionSubtype qualifiedDividend(String qualifiedDividend) {
    
    this.qualifiedDividend = qualifiedDividend;
    return this;
  }

   /**
   * Inflow of cash from a qualified dividend
   * @return qualifiedDividend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of cash from a qualified dividend")

  public String getQualifiedDividend() {
    return qualifiedDividend;
  }


  public void setQualifiedDividend(String qualifiedDividend) {
    this.qualifiedDividend = qualifiedDividend;
  }


  public StandaloneInvestmentTransactionSubtype rebalance(String rebalance) {
    
    this.rebalance = rebalance;
    return this;
  }

   /**
   * Rebalancing transaction (buy or sell) with no net impact to value in the account
   * @return rebalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rebalancing transaction (buy or sell) with no net impact to value in the account")

  public String getRebalance() {
    return rebalance;
  }


  public void setRebalance(String rebalance) {
    this.rebalance = rebalance;
  }


  public StandaloneInvestmentTransactionSubtype returnOfPrincipal(String returnOfPrincipal) {
    
    this.returnOfPrincipal = returnOfPrincipal;
    return this;
  }

   /**
   * Repayment of loan principal
   * @return returnOfPrincipal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Repayment of loan principal")

  public String getReturnOfPrincipal() {
    return returnOfPrincipal;
  }


  public void setReturnOfPrincipal(String returnOfPrincipal) {
    this.returnOfPrincipal = returnOfPrincipal;
  }


  public StandaloneInvestmentTransactionSubtype sell(String sell) {
    
    this.sell = sell;
    return this;
  }

   /**
   * Sell to close or decrease an existing holding
   * @return sell
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sell to close or decrease an existing holding")

  public String getSell() {
    return sell;
  }


  public void setSell(String sell) {
    this.sell = sell;
  }


  public StandaloneInvestmentTransactionSubtype sellShort(String sellShort) {
    
    this.sellShort = sellShort;
    return this;
  }

   /**
   * Sell to open a short position
   * @return sellShort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sell to open a short position")

  public String getSellShort() {
    return sellShort;
  }


  public void setSellShort(String sellShort) {
    this.sellShort = sellShort;
  }


  public StandaloneInvestmentTransactionSubtype shortTermCapitalGain(String shortTermCapitalGain) {
    
    this.shortTermCapitalGain = shortTermCapitalGain;
    return this;
  }

   /**
   * Short-term capital gain received as cash
   * @return shortTermCapitalGain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Short-term capital gain received as cash")

  public String getShortTermCapitalGain() {
    return shortTermCapitalGain;
  }


  public void setShortTermCapitalGain(String shortTermCapitalGain) {
    this.shortTermCapitalGain = shortTermCapitalGain;
  }


  public StandaloneInvestmentTransactionSubtype shortTermCapitalGainReinvestment(String shortTermCapitalGainReinvestment) {
    
    this.shortTermCapitalGainReinvestment = shortTermCapitalGainReinvestment;
    return this;
  }

   /**
   * Purchase using short-term capital gain cash proceeds
   * @return shortTermCapitalGainReinvestment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase using short-term capital gain cash proceeds")

  public String getShortTermCapitalGainReinvestment() {
    return shortTermCapitalGainReinvestment;
  }


  public void setShortTermCapitalGainReinvestment(String shortTermCapitalGainReinvestment) {
    this.shortTermCapitalGainReinvestment = shortTermCapitalGainReinvestment;
  }


  public StandaloneInvestmentTransactionSubtype spinOff(String spinOff) {
    
    this.spinOff = spinOff;
    return this;
  }

   /**
   * Inflow of stock from spin-off transaction of an existing holding
   * @return spinOff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of stock from spin-off transaction of an existing holding")

  public String getSpinOff() {
    return spinOff;
  }


  public void setSpinOff(String spinOff) {
    this.spinOff = spinOff;
  }


  public StandaloneInvestmentTransactionSubtype split(String split) {
    
    this.split = split;
    return this;
  }

   /**
   * Inflow of stock from a forward split of an existing holding
   * @return split
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of stock from a forward split of an existing holding")

  public String getSplit() {
    return split;
  }


  public void setSplit(String split) {
    this.split = split;
  }


  public StandaloneInvestmentTransactionSubtype stockDistribution(String stockDistribution) {
    
    this.stockDistribution = stockDistribution;
    return this;
  }

   /**
   * Inflow of stock from a distribution
   * @return stockDistribution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inflow of stock from a distribution")

  public String getStockDistribution() {
    return stockDistribution;
  }


  public void setStockDistribution(String stockDistribution) {
    this.stockDistribution = stockDistribution;
  }


  public StandaloneInvestmentTransactionSubtype tax(String tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * Taxes paid on behalf of the investor
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Taxes paid on behalf of the investor")

  public String getTax() {
    return tax;
  }


  public void setTax(String tax) {
    this.tax = tax;
  }


  public StandaloneInvestmentTransactionSubtype taxWithheld(String taxWithheld) {
    
    this.taxWithheld = taxWithheld;
    return this;
  }

   /**
   * Taxes withheld on behalf of the customer
   * @return taxWithheld
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Taxes withheld on behalf of the customer")

  public String getTaxWithheld() {
    return taxWithheld;
  }


  public void setTaxWithheld(String taxWithheld) {
    this.taxWithheld = taxWithheld;
  }


  public StandaloneInvestmentTransactionSubtype transfer(String transfer) {
    
    this.transfer = transfer;
    return this;
  }

   /**
   * Movement of assets into or out of an account
   * @return transfer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Movement of assets into or out of an account")

  public String getTransfer() {
    return transfer;
  }


  public void setTransfer(String transfer) {
    this.transfer = transfer;
  }


  public StandaloneInvestmentTransactionSubtype transferFee(String transferFee) {
    
    this.transferFee = transferFee;
    return this;
  }

   /**
   * Fees incurred for transfer of a holding or account
   * @return transferFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees incurred for transfer of a holding or account")

  public String getTransferFee() {
    return transferFee;
  }


  public void setTransferFee(String transferFee) {
    this.transferFee = transferFee;
  }


  public StandaloneInvestmentTransactionSubtype trustFee(String trustFee) {
    
    this.trustFee = trustFee;
    return this;
  }

   /**
   * Fees related to adminstration of a trust account
   * @return trustFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fees related to adminstration of a trust account")

  public String getTrustFee() {
    return trustFee;
  }


  public void setTrustFee(String trustFee) {
    this.trustFee = trustFee;
  }


  public StandaloneInvestmentTransactionSubtype unqualifiedGain(String unqualifiedGain) {
    
    this.unqualifiedGain = unqualifiedGain;
    return this;
  }

   /**
   * Unqualified capital gain received as cash
   * @return unqualifiedGain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unqualified capital gain received as cash")

  public String getUnqualifiedGain() {
    return unqualifiedGain;
  }


  public void setUnqualifiedGain(String unqualifiedGain) {
    this.unqualifiedGain = unqualifiedGain;
  }


  public StandaloneInvestmentTransactionSubtype withdrawal(String withdrawal) {
    
    this.withdrawal = withdrawal;
    return this;
  }

   /**
   * Outflow of cash from an account
   * @return withdrawal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Outflow of cash from an account")

  public String getWithdrawal() {
    return withdrawal;
  }


  public void setWithdrawal(String withdrawal) {
    this.withdrawal = withdrawal;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandaloneInvestmentTransactionSubtype standaloneInvestmentTransactionSubtype = (StandaloneInvestmentTransactionSubtype) o;
    return Objects.equals(this.accountFee, standaloneInvestmentTransactionSubtype.accountFee) &&
        Objects.equals(this.assignment, standaloneInvestmentTransactionSubtype.assignment) &&
        Objects.equals(this.buy, standaloneInvestmentTransactionSubtype.buy) &&
        Objects.equals(this.buyToCover, standaloneInvestmentTransactionSubtype.buyToCover) &&
        Objects.equals(this.contribution, standaloneInvestmentTransactionSubtype.contribution) &&
        Objects.equals(this.deposit, standaloneInvestmentTransactionSubtype.deposit) &&
        Objects.equals(this.distribution, standaloneInvestmentTransactionSubtype.distribution) &&
        Objects.equals(this.dividend, standaloneInvestmentTransactionSubtype.dividend) &&
        Objects.equals(this.dividendReinvestment, standaloneInvestmentTransactionSubtype.dividendReinvestment) &&
        Objects.equals(this.exercise, standaloneInvestmentTransactionSubtype.exercise) &&
        Objects.equals(this.expire, standaloneInvestmentTransactionSubtype.expire) &&
        Objects.equals(this.fundFee, standaloneInvestmentTransactionSubtype.fundFee) &&
        Objects.equals(this.interest, standaloneInvestmentTransactionSubtype.interest) &&
        Objects.equals(this.interestReceivable, standaloneInvestmentTransactionSubtype.interestReceivable) &&
        Objects.equals(this.interestReinvestment, standaloneInvestmentTransactionSubtype.interestReinvestment) &&
        Objects.equals(this.legalFee, standaloneInvestmentTransactionSubtype.legalFee) &&
        Objects.equals(this.loanPayment, standaloneInvestmentTransactionSubtype.loanPayment) &&
        Objects.equals(this.longTermCapitalGain, standaloneInvestmentTransactionSubtype.longTermCapitalGain) &&
        Objects.equals(this.longTermCapitalGainReinvestment, standaloneInvestmentTransactionSubtype.longTermCapitalGainReinvestment) &&
        Objects.equals(this.managementFee, standaloneInvestmentTransactionSubtype.managementFee) &&
        Objects.equals(this.marginExpense, standaloneInvestmentTransactionSubtype.marginExpense) &&
        Objects.equals(this.merger, standaloneInvestmentTransactionSubtype.merger) &&
        Objects.equals(this.miscellaneousFee, standaloneInvestmentTransactionSubtype.miscellaneousFee) &&
        Objects.equals(this.nonQualifiedDividend, standaloneInvestmentTransactionSubtype.nonQualifiedDividend) &&
        Objects.equals(this.nonResidentTax, standaloneInvestmentTransactionSubtype.nonResidentTax) &&
        Objects.equals(this.pendingCredit, standaloneInvestmentTransactionSubtype.pendingCredit) &&
        Objects.equals(this.pendingDebit, standaloneInvestmentTransactionSubtype.pendingDebit) &&
        Objects.equals(this.qualifiedDividend, standaloneInvestmentTransactionSubtype.qualifiedDividend) &&
        Objects.equals(this.rebalance, standaloneInvestmentTransactionSubtype.rebalance) &&
        Objects.equals(this.returnOfPrincipal, standaloneInvestmentTransactionSubtype.returnOfPrincipal) &&
        Objects.equals(this.sell, standaloneInvestmentTransactionSubtype.sell) &&
        Objects.equals(this.sellShort, standaloneInvestmentTransactionSubtype.sellShort) &&
        Objects.equals(this.shortTermCapitalGain, standaloneInvestmentTransactionSubtype.shortTermCapitalGain) &&
        Objects.equals(this.shortTermCapitalGainReinvestment, standaloneInvestmentTransactionSubtype.shortTermCapitalGainReinvestment) &&
        Objects.equals(this.spinOff, standaloneInvestmentTransactionSubtype.spinOff) &&
        Objects.equals(this.split, standaloneInvestmentTransactionSubtype.split) &&
        Objects.equals(this.stockDistribution, standaloneInvestmentTransactionSubtype.stockDistribution) &&
        Objects.equals(this.tax, standaloneInvestmentTransactionSubtype.tax) &&
        Objects.equals(this.taxWithheld, standaloneInvestmentTransactionSubtype.taxWithheld) &&
        Objects.equals(this.transfer, standaloneInvestmentTransactionSubtype.transfer) &&
        Objects.equals(this.transferFee, standaloneInvestmentTransactionSubtype.transferFee) &&
        Objects.equals(this.trustFee, standaloneInvestmentTransactionSubtype.trustFee) &&
        Objects.equals(this.unqualifiedGain, standaloneInvestmentTransactionSubtype.unqualifiedGain) &&
        Objects.equals(this.withdrawal, standaloneInvestmentTransactionSubtype.withdrawal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountFee, assignment, buy, buyToCover, contribution, deposit, distribution, dividend, dividendReinvestment, exercise, expire, fundFee, interest, interestReceivable, interestReinvestment, legalFee, loanPayment, longTermCapitalGain, longTermCapitalGainReinvestment, managementFee, marginExpense, merger, miscellaneousFee, nonQualifiedDividend, nonResidentTax, pendingCredit, pendingDebit, qualifiedDividend, rebalance, returnOfPrincipal, sell, sellShort, shortTermCapitalGain, shortTermCapitalGainReinvestment, spinOff, split, stockDistribution, tax, taxWithheld, transfer, transferFee, trustFee, unqualifiedGain, withdrawal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandaloneInvestmentTransactionSubtype {\n");
    sb.append("    accountFee: ").append(toIndentedString(accountFee)).append("\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    buyToCover: ").append(toIndentedString(buyToCover)).append("\n");
    sb.append("    contribution: ").append(toIndentedString(contribution)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    dividend: ").append(toIndentedString(dividend)).append("\n");
    sb.append("    dividendReinvestment: ").append(toIndentedString(dividendReinvestment)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    fundFee: ").append(toIndentedString(fundFee)).append("\n");
    sb.append("    interest: ").append(toIndentedString(interest)).append("\n");
    sb.append("    interestReceivable: ").append(toIndentedString(interestReceivable)).append("\n");
    sb.append("    interestReinvestment: ").append(toIndentedString(interestReinvestment)).append("\n");
    sb.append("    legalFee: ").append(toIndentedString(legalFee)).append("\n");
    sb.append("    loanPayment: ").append(toIndentedString(loanPayment)).append("\n");
    sb.append("    longTermCapitalGain: ").append(toIndentedString(longTermCapitalGain)).append("\n");
    sb.append("    longTermCapitalGainReinvestment: ").append(toIndentedString(longTermCapitalGainReinvestment)).append("\n");
    sb.append("    managementFee: ").append(toIndentedString(managementFee)).append("\n");
    sb.append("    marginExpense: ").append(toIndentedString(marginExpense)).append("\n");
    sb.append("    merger: ").append(toIndentedString(merger)).append("\n");
    sb.append("    miscellaneousFee: ").append(toIndentedString(miscellaneousFee)).append("\n");
    sb.append("    nonQualifiedDividend: ").append(toIndentedString(nonQualifiedDividend)).append("\n");
    sb.append("    nonResidentTax: ").append(toIndentedString(nonResidentTax)).append("\n");
    sb.append("    pendingCredit: ").append(toIndentedString(pendingCredit)).append("\n");
    sb.append("    pendingDebit: ").append(toIndentedString(pendingDebit)).append("\n");
    sb.append("    qualifiedDividend: ").append(toIndentedString(qualifiedDividend)).append("\n");
    sb.append("    rebalance: ").append(toIndentedString(rebalance)).append("\n");
    sb.append("    returnOfPrincipal: ").append(toIndentedString(returnOfPrincipal)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    sellShort: ").append(toIndentedString(sellShort)).append("\n");
    sb.append("    shortTermCapitalGain: ").append(toIndentedString(shortTermCapitalGain)).append("\n");
    sb.append("    shortTermCapitalGainReinvestment: ").append(toIndentedString(shortTermCapitalGainReinvestment)).append("\n");
    sb.append("    spinOff: ").append(toIndentedString(spinOff)).append("\n");
    sb.append("    split: ").append(toIndentedString(split)).append("\n");
    sb.append("    stockDistribution: ").append(toIndentedString(stockDistribution)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxWithheld: ").append(toIndentedString(taxWithheld)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("    transferFee: ").append(toIndentedString(transferFee)).append("\n");
    sb.append("    trustFee: ").append(toIndentedString(trustFee)).append("\n");
    sb.append("    unqualifiedGain: ").append(toIndentedString(unqualifiedGain)).append("\n");
    sb.append("    withdrawal: ").append(toIndentedString(withdrawal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

