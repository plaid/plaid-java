/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.651.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.plaid.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of OAuth grant being requested:    - &#x60;client_credentials&#x60; allows exchanging a client id and client secret for a refresh and access token. - &#x60;refresh_token&#x60; allows refreshing an access token using a refresh token. When using this grant type, only the &#x60;refresh_token&#x60; field is required (along with the &#x60;client_id&#x60; and &#x60;client_secret&#x60;). - &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; allows exchanging a subject token for an OAuth token. When using this grant type, the &#x60;audience&#x60;, &#x60;subject_token&#x60; and &#x60;subject_token_type&#x60; fields are required. These grants are defined in their respective RFCs. &#x60;refresh_token&#x60; and &#x60;client_credentials&#x60; are defined in RFC 6749 and &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; is defined in RFC 8693.
 */
@JsonAdapter(OAuthGrantType.Adapter.class)
public enum OAuthGrantType {
  
  REFRESH_TOKEN("refresh_token"),
  
  URN_IETF_PARAMS_OAUTH_GRANT_TYPE_TOKEN_EXCHANGE("urn:ietf:params:oauth:grant-type:token-exchange"),
  
  CLIENT_CREDENTIALS("client_credentials"),

  // This is returned when an enum is returned from the API that doesn't exist in the OpenAPI file.
  // Try upgrading your client-library version.
  ENUM_UNKNOWN("ENUM_UNKNOWN");

  private String value;

  OAuthGrantType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OAuthGrantType fromValue(String value) {
    for (OAuthGrantType b : OAuthGrantType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    
    return OAuthGrantType.ENUM_UNKNOWN;
  }

  public static class Adapter extends TypeAdapter<OAuthGrantType> {
    @Override
    public void write(final JsonWriter jsonWriter, final OAuthGrantType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OAuthGrantType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OAuthGrantType.fromValue(value);
    }
  }
}

